$date
	Mon Apr 18 18:00:23 2016
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module MINIPROC_TB $end
$var wire 1 ! rf_write $end
$var wire 1 " rf_read $end
$var wire 32 # rf_data_r2 [31:0] $end
$var wire 32 $ rf_data_r1 [31:0] $end
$var wire 32 % alu_op2 [31:0] $end
$var wire 32 & alu_op1 [31:0] $end
$var wire 6 ' alu_code [5:0] $end
$var wire 1 ( SYS_CLK $end
$var wire 32 ) ALU_RESULT [31:0] $end
$var reg 6 * CU_FUNCT [5:0] $end
$var reg 6 + CU_OPCODE [5:0] $end
$var reg 1 , CU_RST $end
$var reg 5 - CU_SHAMT [4:0] $end
$var reg 5 . RF_ADDR_R1 [4:0] $end
$var reg 5 / RF_ADDR_R2 [4:0] $end
$var reg 5 0 RF_ADDR_W [4:0] $end
$var reg 1 1 RF_RST $end
$var integer 32 2 pass [31:0] $end
$var integer 32 3 status [31:0] $end
$var integer 32 4 test [31:0] $end
$scope function test_result $end
$var reg 32 5 actual [31:0] $end
$var reg 32 6 exp [31:0] $end
$var reg 6 7 funct [5:0] $end
$var reg 32 8 op1 [31:0] $end
$var reg 32 9 op2 [31:0] $end
$var reg 17 : opr [16:0] $end
$var reg 1 ; test_result $end
$upscope $end
$scope module alu_inst $end
$var wire 32 < OP2 [31:0] $end
$var wire 32 = OP1 [31:0] $end
$var wire 6 > FUNCT [5:0] $end
$var reg 32 ? RESULT [31:0] $end
$upscope $end
$scope module cg_inst $end
$var reg 1 ( CLK $end
$upscope $end
$scope module cu_inst $end
$var wire 1 ( CLK $end
$var wire 6 @ FUNCT [5:0] $end
$var wire 6 A OPCODE [5:0] $end
$var wire 1 , RST $end
$var wire 5 B SHAMT [4:0] $end
$var wire 32 C DATA_R2 [31:0] $end
$var wire 32 D DATA_R1 [31:0] $end
$var reg 6 E ALU_CODE [5:0] $end
$var reg 32 F ALU_OP1 [31:0] $end
$var reg 32 G ALU_OP2 [31:0] $end
$var reg 1 " RF_READ $end
$var reg 1 ! RF_WRITE $end
$var reg 2 H state [1:0] $end
$upscope $end
$scope module rf_inst $end
$var wire 5 I ADDR_R1 [4:0] $end
$var wire 5 J ADDR_R2 [4:0] $end
$var wire 5 K ADDR_W [4:0] $end
$var wire 1 ( CLK $end
$var wire 32 L DATA_W [31:0] $end
$var wire 1 " READ $end
$var wire 1 1 RST $end
$var wire 1 ! WRITE $end
$var reg 32 M DATA_R1 [31:0] $end
$var reg 32 N DATA_R2 [31:0] $end
$var integer 32 O i [31:0] $end
$upscope $end
$scope task test_counter $end
$var reg 1 P status $end
$var integer 32 Q pass [31:0] $end
$var integer 32 R test [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx R
bx Q
xP
b100000 O
bx N
bx M
bx L
bx K
bx J
bx I
b0 H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
x;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
b0 4
bx 3
b0 2
01
bx 0
bx /
bx .
bx -
0,
bx +
bx *
bx )
1(
bx '
bx &
bx %
bx $
bx #
x"
x!
$end
#500
0(
#1000
0!
1"
b1 H
1(
b100000 *
b100000 @
b0 -
b0 B
b11 /
b11 J
b10010 .
b10010 I
b11111 0
b11111 K
b0 +
b0 A
11
1,
#1500
0(
#2000
b10101 )
b10101 ?
b10101 L
b100000 '
b100000 >
b100000 E
b11 %
b11 <
b11 G
b10010 &
b10010 =
b10010 F
b10 H
b11 #
b11 C
b11 N
b10010 $
b10010 D
b10010 M
1(
#2500
0(
#3000
1!
0"
b11 H
1(
#3500
0(
#4000
b0 H
1(
0,
b1 2
b1 4
1P
b1 Q
b1 R
b1 3
1;
b10101 6
b101011 :
b10010 8
b11 9
b100000 7
b10101 5
#4500
0(
#5000
0!
1"
b1 H
1(
b100010 *
b100010 @
b101 /
b101 J
b1111 .
b1111 I
b11110 0
b11110 K
1,
#5500
0(
#6000
b1010 )
b1010 ?
b1010 L
b100010 '
b100010 >
b100010 E
b101 %
b101 <
b101 G
b1111 &
b1111 =
b1111 F
b10 H
b101 #
b101 C
b101 N
b1111 $
b1111 D
b1111 M
1(
#6500
0(
#7000
1!
0"
b11 H
1(
#7500
0(
#8000
b0 H
1(
0,
b10 2
b10 4
b10 Q
b10 R
b1010 6
b101101 :
b1111 8
b101 9
b100010 7
b1010 5
#8500
0(
#9000
0!
1"
b1 H
1(
b101100 *
b101100 @
b111 /
b111 J
b1100 .
b1100 I
b11101 0
b11101 K
1,
#9500
0(
#10000
b1010100 )
b1010100 ?
b1010100 L
b101100 '
b101100 >
b101100 E
b111 %
b111 <
b111 G
b1100 &
b1100 =
b1100 F
b10 H
b111 #
b111 C
b111 N
b1100 $
b1100 D
b1100 M
1(
#10500
0(
#11000
1!
0"
b11 H
1(
#11500
0(
#12000
b0 H
1(
0,
b11 2
b11 4
b11 Q
b11 R
b1010100 6
b101010 :
b1100 8
b111 9
b101100 7
b1010100 5
#12500
0(
#13000
0!
1"
b1 H
1(
b1 *
b1 @
b10 -
b10 B
b0 /
b0 J
b1001 .
b1001 I
b11100 0
b11100 K
1,
#13500
0(
#14000
b100100 )
b100100 ?
b100100 L
b1 '
b1 >
b1 E
b10 %
b10 <
b10 G
b1001 &
b1001 =
b1001 F
b10 H
b0 #
b0 C
b0 N
b1001 $
b1001 D
b1001 M
1(
#14500
0(
#15000
1!
0"
b11 H
1(
#15500
0(
#16000
b0 H
1(
0,
b100 2
b100 4
b100 Q
b100 R
b100100 6
b11110000111100 :
b1001 8
b10 9
b1 7
b100100 5
#16500
0(
#17000
0!
1"
b1 H
1(
b10 *
b10 @
b1 -
b1 B
b11101 .
b11101 I
b11011 0
b11011 K
1,
#17500
0(
#18000
b101010 )
b101010 ?
b101010 L
b10 '
b10 >
b10 E
b1 %
b1 <
b1 G
b1010100 &
b1010100 =
b1010100 F
b10 H
b1010100 $
b1010100 D
b1010100 M
1(
#18500
0(
#19000
1!
0"
b11 H
1(
#19500
0(
#20000
b0 H
1(
0,
b101 2
b101 4
b101 Q
b101 R
b101010 6
b11111000111110 :
b1010100 8
b1 9
b10 7
b101010 5
#20500
0(
#21000
0!
1"
b1 H
1(
b100100 *
b100100 @
b0 -
b0 B
b110 /
b110 J
b11111 .
b11111 I
b11010 0
b11010 K
1,
#21500
0(
#22000
b100 )
b100 ?
b100 L
b100100 '
b100100 >
b100100 E
b110 %
b110 <
b110 G
b10101 &
b10101 =
b10101 F
b10 H
b110 #
b110 C
b110 N
b10101 $
b10101 D
b10101 M
1(
#22500
0(
#23000
1!
0"
b11 H
1(
#23500
0(
#24000
b0 H
1(
0,
b110 2
b110 4
b110 Q
b110 R
b100 6
b100110 :
b10101 8
b110 9
b100100 7
b100 5
#24500
0(
#25000
0!
1"
b1 H
1(
b100101 *
b100101 @
b100 /
b100 J
b11110 .
b11110 I
b11001 0
b11001 K
1,
#25500
0(
#26000
b1110 )
b1110 ?
b1110 L
b100101 '
b100101 >
b100101 E
b100 %
b100 <
b100 G
b1010 &
b1010 =
b1010 F
b10 H
b100 #
b100 C
b100 N
b1010 $
b1010 D
b1010 M
1(
#26500
0(
#27000
1!
0"
b11 H
1(
#27500
0(
#28000
b0 H
1(
0,
b111 2
b111 4
b111 Q
b111 R
b1110 6
b1111100 :
b1010 8
b100 9
b100101 7
b1110 5
#28500
0(
#29000
0!
1"
b1 H
1(
b100111 *
b100111 @
b11011 /
b11011 J
b11100 .
b11100 I
b11000 0
b11000 K
1,
#29500
0(
#30000
b11111111111111111111111111010001 )
b11111111111111111111111111010001 ?
b11111111111111111111111111010001 L
b100111 '
b100111 >
b100111 E
b101010 %
b101010 <
b101010 G
b100100 &
b100100 =
b100100 F
b10 H
b101010 #
b101010 C
b101010 N
b100100 $
b100100 D
b100100 M
1(
#30500
0(
#31000
1!
0"
b11 H
1(
#31500
0(
#32000
b0 H
1(
0,
b1000 2
b1000 4
b1000 Q
b1000 R
b11111111111111111111111111010001 6
b111111001111100 :
b100100 8
b101010 9
b100111 7
b11111111111111111111111111010001 5
#32500
0(
#33000
0!
1"
b1 H
1(
b101010 *
b101010 @
b11001 /
b11001 J
b11010 .
b11010 I
b10111 0
b10111 K
1,
#33500
0(
#34000
b1 )
b1 ?
b1 L
b101010 '
b101010 >
b101010 E
b1110 %
b1110 <
b1110 G
b100 &
b100 =
b100 F
b10 H
b1110 #
b1110 C
b1110 N
b100 $
b100 D
b100 M
1(
#34500
0(
#35000
1!
0"
b11 H
1(
#35500
0(
#36000
b0 H
1(
0,
b1001 2
b1001 4
b1001 Q
b1001 R
b1 6
b111100 :
b100 8
b1110 9
b101010 7
b1 5
#36500
0(
#37000
0!
1"
b1 H
1(
b1000 /
b1000 J
b11000 .
b11000 I
b10110 0
b10110 K
1,
#37500
0(
#38000
b0 )
b0 ?
b0 L
b1000 %
b1000 <
b1000 G
b11111111111111111111111111010001 &
b11111111111111111111111111010001 =
b11111111111111111111111111010001 F
b10 H
b1000 #
b1000 C
b1000 N
b11111111111111111111111111010001 $
b11111111111111111111111111010001 D
b11111111111111111111111111010001 M
1(
#38500
0(
#39000
1!
0"
b11 H
1(
#39500
0(
#40000
1(
b1010 2
b1010 4
b1010 Q
b1010 R
b0 6
b11111111111111111111111111010001 8
b1000 9
b0 5
